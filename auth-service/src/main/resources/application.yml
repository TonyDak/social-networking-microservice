server:
  port: 8082
spring:
  application:
    name: auth-service
  cloud:
    config:
      uri: http://localhost:8888
  main:
    allow-bean-definition-overriding: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.auth-server-url}/realms/${keycloak.realm}
      redirect-uri: http://localhost:3000/auth/callback
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.*
kafka:
  topic:
    user-creation: user-creation-topic
    user-login: user-login-topic
    user-update: user-update-topic
    email-verification-response: email-verification-response-topic
    email-verification-request: email-verification-request-topic


keycloak:
  realm: social-network
  ssl-required: external
  resource: auth-service
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET}
  use-resource-role-mappings: true
  admin:
    username: ${ADMIN_USERNAME}
    password: ${ADMIN_PASSWORD}
    clientId: admin-cli
  cors: true
  principal-attribute: preferred_username
  auth-server-url: http://localhost:8080

logging:
  level:
    org.keycloak: DEBUG
    org.springframework.security: DEBUG
    webclient: DEBUG
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    hostname: localhost
    preferIpAddress: true