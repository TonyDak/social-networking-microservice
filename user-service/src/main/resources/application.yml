server:
  port: 8083
spring:
  application:
    name: user-service
  cloud:
      config:
        uri: http://localhost:8888
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.auth-server-url}/realms/${keycloak.realm}
          jwk-set-uri: ${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/certs
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.*
  datasource:
    url: jdbc:mysql://localhost:3308/user_db
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

kafka:
  topic:
    user-creation: user-creation-topic
    user-login: user-login-topic
    user-update: user-update-topic
    user-deletion: user-deletion-topic

keycloak:
  realm: social-network
  ssl-required: external
  resource: auth-service
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET}
  use-resource-role-mappings: true
  admin:
    username: ${ADMIN_USERNAME}
    password: ${ADMIN_PASSWORD}
    clientId: admin-cli
  cors: true
  principal-attribute: preferred_username
  auth-server-url: http://localhost:8080
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/